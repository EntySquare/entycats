// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package lib

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// InvestorsABI is the input ABI used to generate the binding from.
const InvestorsABI = "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startover\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_institutionflag\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_institution\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"firstBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hsfToken\",\"outputs\":[{\"internalType\":\"contractHillStoneFinance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hsfaddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tcaddress\",\"type\":\"address\"}],\"name\":\"initToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"institution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"institutionflag\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maneger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fromAdress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betClass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_betClass\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"removeAmount\",\"type\":\"uint256\"}],\"name\":\"removeBet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bounces\",\"type\":\"uint256\"}],\"name\":\"shareOut\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"

// InvestorsBin is the compiled bytecode used for deploying new contracts.
var InvestorsBin = "0x60806040523480156200001157600080fd5b506040516200317b3803806200317b83398181016040528101906200003791906200014e565b6000600a81905550436003819055508260048190555081600560146101000a81548160ff02191690831515021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560149054906101000a900460ff1615620001005780600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050506200023c565b6000815190506200011a81620001ee565b92915050565b600081519050620001318162000208565b92915050565b600081519050620001488162000222565b92915050565b6000806000606084860312156200016457600080fd5b6000620001748682870162000137565b9350506020620001878682870162000120565b92505060406200019a8682870162000109565b9150509250925092565b6000620001b182620001c4565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620001f981620001a4565b81146200020557600080fd5b50565b6200021381620001b8565b81146200021f57600080fd5b50565b6200022d81620001e4565b81146200023957600080fd5b50565b612f2f806200024c6000396000f3fe60806040526004361061009c5760003560e01c80638a9faad2116100645780638a9faad214610169578063ba2b6bad14610199578063d1384eb6146101c2578063d5091834146101ed578063f1ce62b714610218578063f231a4f6146102435761009c565b806323191418146100a1578063231b0268146100cc57806335400d66146100f757806338fe6a96146101135780637929ce1e1461013e575b600080fd5b3480156100ad57600080fd5b506100b6610273565b6040516100c39190612ad3565b60405180910390f35b3480156100d857600080fd5b506100e1610299565b6040516100ee9190612b6e565b60405180910390f35b610111600480360381019061010c9190612930565b61029f565b005b34801561011f57600080fd5b506101286114d6565b6040516101359190612b6e565b60405180910390f35b34801561014a57600080fd5b506101536114dc565b6040516101609190612a9d565b60405180910390f35b610183600480360381019061017e91906128b8565b6114ef565b6040516101909190612a9d565b60405180910390f35b3480156101a557600080fd5b506101c060048036038101906101bb919061287c565b611be7565b005b3480156101ce57600080fd5b506101d7611c6c565b6040516101e49190612a59565b60405180910390f35b3480156101f957600080fd5b50610202611c92565b60405161020f9190612a59565b60405180910390f35b34801561022457600080fd5b5061022d611cb8565b60405161023a9190612ab8565b60405180910390f35b61025d600480360381019061025891906128b8565b611cdc565b60405161026a9190612a9d565b60405180910390f35b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032690612b0e565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161038c9190612a59565b60206040518083038186803b1580156103a457600080fd5b505afa1580156103b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dc9190612959565b905081811015610421576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041890612aee565b60405180910390fd5b600454821115610f1a5760006004548361043b9190612c7b565b9050600560149054906101000a900460ff161561053157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a866104c09190612bf0565b6040518363ffffffff1660e01b81526004016104dd929190612a74565b602060405180830381600087803b1580156104f757600080fd5b505af115801561050b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052f9190612907565b505b60008060005b600160076000018054905061054c9190612c7b565b811161082157600060076000018281548110610591577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101805480602002602001604051908101604052809291908181526020016000905b828210156106755783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610625565b50505050905060005b6001825161068c9190612c7b565b811161080b576107388282815181106106ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160400151436106e59190612c7b565b83838151811061071e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015161239990919063ffffffff16565b866107439190612b9a565b95506107eb828281518110610781577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160400151436107989190612c7b565b8383815181106107d1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015161239990919063ffffffff16565b856107f69190612b9a565b9450808061080390612d69565b91505061067e565b505050808061081990612d69565b915050610537565b5060005b600160076000018054905061083a9190612c7b565b8111610d865760006007600001828154811061087f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101805480602002602001604051908101604052809291908181526020016000905b828210156109635783829060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505081526020019060010190610913565b50505050905060008060005b6001845161097d9190612c7b565b8111610afc57610a298482815181106109bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160400151436109d69190612c7b565b858381518110610a0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015161239990919063ffffffff16565b83610a349190612b9a565b9250610adc848281518110610a72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040015143610a899190612c7b565b858381518110610ac2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015161239990919063ffffffff16565b82610ae79190612b9a565b91508080610af490612d69565b91505061096f565b50600082141580610b0e575060008114155b15610d6f576000871415610b2157600196505b6000861415610b2f57600195505b6003600a89610b3e9190612bf0565b83610b499190612c21565b610b539190612c21565b9150600080600760020154610b698760026123de565b6003600a600454610b7a9190612bf0565b610b849190612c21565b610b8e9190612c21565b610b989190612bf0565b9050600560149054906101000a900460ff1615610c1c576006600a8b610bbe9190612bf0565b84610bc99190612c21565b610bd39190612c21565b9250600760010154610be68760016123de565b6006600a600454610bf79190612bf0565b610c019190612c21565b610c0b9190612c21565b610c159190612bf0565b9150610c85565b6007600a8b610c2b9190612bf0565b84610c369190612c21565b610c409190612c21565b9250600760010154610c538760016123de565b6007600a600454610c649190612bf0565b610c6e9190612c21565b610c789190612c21565b610c829190612bf0565b91505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8783858c88610cd29190612bf0565b8e8a610cde9190612bf0565b610ce89190612b9a565b610cf29190612b9a565b610cfc9190612b9a565b6040518363ffffffff1660e01b8152600401610d19929190612a74565b602060405180830381600087803b158015610d3357600080fd5b505af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190612907565b5050505b505050508080610d7e90612d69565b915050610825565b506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610de49190612a59565b60206040518083038186803b158015610dfc57600080fd5b505afa158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e349190612959565b905060008114610f1157600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610ebd929190612a74565b602060405180830381600087803b158015610ed757600080fd5b505af1158015610eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0f9190612907565b505b50505050611452565b600082600454610f2a9190612c7b565b905060005b6001600760000180549050610f449190612c7b565b811161132c57600060076001015414158015610f665750600060076002015414155b1561131957600060076000018281548110610faa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560149054906101000a900460ff161561117f57600454600a85610ffe9190612c21565b1161109457600760020154600a6110159190612c21565b6110208360026123de565b600360045461102f9190612c21565b6110399190612c21565b6110439190612bf0565b600760010154600a6110559190612c21565b6110608460016123de565b600660045461106f9190612c21565b6110799190612c21565b6110839190612bf0565b61108d9190612b9a565b905061117a565b600480546110a29190612c21565b600a856110af9190612c21565b11611150576007600201546110c58360026123de565b6110cf9190612bf0565b600a60066004546110e09190612c21565b6110ea9190612bf0565b876110f59190612c7b565b6110ff9190612c21565b600760010154600a6111119190612c21565b61111c8460016123de565b600660045461112b9190612c21565b6111359190612c21565b61113f9190612bf0565b6111499190612b9a565b9050611179565b6007600101546111618360016123de565b8761116c9190612c21565b6111769190612bf0565b90505b5b611266565b600360045461118e9190612c21565b600a8561119b9190612c21565b1161123c576007600201546111b18360026123de565b6111bb9190612bf0565b600a60076004546111cc9190612c21565b6111d69190612bf0565b876111e19190612c7b565b6111eb9190612c21565b600760010154600a6111fd9190612c21565b6112088460016123de565b60076004546112179190612c21565b6112219190612c21565b61122b9190612bf0565b6112359190612b9a565b9050611265565b60076001015461124d8360016123de565b876112589190612c21565b6112629190612bf0565b90505b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016112c3929190612a74565b602060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113159190612907565b5050505b808061132490612d69565b915050610f2f565b50600560149054906101000a900460ff161561145057600454600a826113529190612c21565b1161144f57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a60096004546113c99190612c21565b6113d39190612bf0565b866113de9190612c7b565b6040518363ffffffff1660e01b81526004016113fb929190612a74565b602060405180830381600087803b15801561141557600080fd5b505af1158015611429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144d9190612907565b505b5b505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639975038c6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114ba57600080fd5b505af11580156114ce573d6000803e3d6000fd5b505050505050565b60045481565b600560149054906101000a900460ff1681565b60006114fa846125d3565b611539576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153090612b4e565b60405180910390fd5b6000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101805490509050600083905060018514156118b45760006115a18760016123de565b9050848110156115e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115dd90612b2e565b60405180910390fd5b6115fe8560076001015461262190919063ffffffff16565b60076001018190555060006001846116169190612c7b565b90505b600081106118b15782600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101828154811061169f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000015410156117ec57600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001018181548110611734577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000154836117519190612c7b565b92506000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160010182815481106117d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016000018190555061189e565b82600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101828154811061186a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600001600082825461188a9190612c7b565b925050819055506001945050505050611be0565b80806118a990612d3f565b915050611619565b50505b6002851415611bdd5760006118ca8760026123de565b90508481101561190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190690612b2e565b60405180910390fd5b6119278560076002015461262190919063ffffffff16565b600760020181905550600060018461193f9190612c7b565b90505b60008110611bda5782600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160010182815481106119c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600101541015611b1557600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001018181548110611a5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001015483611a7a9190612c7b565b92506000600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001018281548110611afb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010181905550611bc7565b82600660008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001018281548110611b93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002090600302016001016000828254611bb39190612c7b565b925050819055506001945050505050611be0565b8080611bd290612d3f565b915050611942565b50505b50505b9392505050565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611ce7846125d3565b15611f665760006001841415611dce57600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001016040518060600160405280858152602001600081526020014381525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010155604082015181600201555050611db98360076001015461264a90919063ffffffff16565b600760010181905550611dcb85612672565b90505b6002841415611eae57600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001016040518060600160405280600081526020018581526020014381525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010155604082015181600201555050611e998360076002015461264a90919063ffffffff16565b600760020181905550611eab85612672565b90505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b386836040518363ffffffff1660e01b8152600401611f09929190612a74565b602060405180830381600087803b158015611f2357600080fd5b505af1158015611f37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5b9190612907565b506001915050612392565b600a6000815480929190611f7990612d69565b9190505550600a54600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600183141561212057600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101604051806060016040528084815260200160008152602001438152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020155505083600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506121168260076001015461264a90919063ffffffff16565b6007600101819055505b600283141561227957600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600101604051806060016040528060008152602001848152602001438152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020155505083600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061226f8260076002015461264a90919063ffffffff16565b6007600201819055505b6007600001849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b385846040518363ffffffff1660e01b815260040161233a929190612a74565b602060405180830381600087803b15801561235457600080fd5b505af1158015612368573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238c9190612907565b50600190505b9392505050565b6000808314156123ac57600090506123d8565b600082846123ba9190612c21565b90508284826123c99190612bf0565b146123d357600080fd5b809150505b92915050565b600080600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160010180549050905060018314156124fc5760005b6001826124459190612c7b565b81116124fa57600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160010181815481106124c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000154836124e59190612b9a565b925080806124f290612d69565b915050612438565b505b60028314156125cc5760005b6001826125159190612c7b565b81116125ca57600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001018181548110612598577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160010154836125b59190612b9a565b925080806125c290612d69565b915050612508565b505b5092915050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154119050919050565b60008282111561263057600080fd5b6000828461263e9190612c7b565b90508091505092915050565b60008082846126599190612b9a565b90508381101561266857600080fd5b8091505092915050565b600080600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160010180549050905060005b6001826126d09190612c7b565b811161282157600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016001018181548110612753577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020906003020160000154836127709190612b9a565b9250600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160010181815481106127ef577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000209060030201600101548361280c9190612b9a565b9250808061281990612d69565b9150506126c3565b5050919050565b60008135905061283781612eb4565b92915050565b60008151905061284c81612ecb565b92915050565b60008135905061286181612ee2565b92915050565b60008151905061287681612ee2565b92915050565b6000806040838503121561288f57600080fd5b600061289d85828601612828565b92505060206128ae85828601612828565b9150509250929050565b6000806000606084860312156128cd57600080fd5b60006128db86828701612828565b93505060206128ec86828701612852565b92505060406128fd86828701612852565b9150509250925092565b60006020828403121561291957600080fd5b60006129278482850161283d565b91505092915050565b60006020828403121561294257600080fd5b600061295084828501612852565b91505092915050565b60006020828403121561296b57600080fd5b600061297984828501612867565b91505092915050565b61298b81612caf565b82525050565b61299a81612cc1565b82525050565b6129a981612cf7565b82525050565b6129b881612d1b565b82525050565b60006129cb602083612b89565b91506129d682612e10565b602082019050919050565b60006129ee601b83612b89565b91506129f982612e39565b602082019050919050565b6000612a11601583612b89565b9150612a1c82612e62565b602082019050919050565b6000612a34601483612b89565b9150612a3f82612e8b565b602082019050919050565b612a5381612ced565b82525050565b6000602082019050612a6e6000830184612982565b92915050565b6000604082019050612a896000830185612982565b612a966020830184612a4a565b9392505050565b6000602082019050612ab26000830184612991565b92915050565b6000602082019050612acd60008301846129a0565b92915050565b6000602082019050612ae860008301846129af565b92915050565b60006020820190508181036000830152612b07816129be565b9050919050565b60006020820190508181036000830152612b27816129e1565b9050919050565b60006020820190508181036000830152612b4781612a04565b9050919050565b60006020820190508181036000830152612b6781612a27565b9050919050565b6000602082019050612b836000830184612a4a565b92915050565b600082825260208201905092915050565b6000612ba582612ced565b9150612bb083612ced565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612be557612be4612db2565b5b828201905092915050565b6000612bfb82612ced565b9150612c0683612ced565b925082612c1657612c15612de1565b5b828204905092915050565b6000612c2c82612ced565b9150612c3783612ced565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c7057612c6f612db2565b5b828202905092915050565b6000612c8682612ced565b9150612c9183612ced565b925082821015612ca457612ca3612db2565b5b828203905092915050565b6000612cba82612ccd565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612d0282612d09565b9050919050565b6000612d1482612ccd565b9050919050565b6000612d2682612d2d565b9050919050565b6000612d3882612ccd565b9050919050565b6000612d4a82612ced565b91506000821415612d5e57612d5d612db2565b5b600182039050919050565b6000612d7482612ced565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612da757612da6612db2565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f6e6f7420656e6f756768207573647420696e207468697320636f6e7472616374600082015250565b7f4f6e6c79206d616e656765722063616e2063616c6c20746869732e0000000000600082015250565b7f6e6f7420656e6f75676820657874616e74206873660000000000000000000000600082015250565b7f63616e206e6f742066696e642061646472657373000000000000000000000000600082015250565b612ebd81612caf565b8114612ec857600080fd5b50565b612ed481612cc1565b8114612edf57600080fd5b50565b612eeb81612ced565b8114612ef657600080fd5b5056fea264697066735822122058cdd88a7bb855d73fd7745b20b21cf18ed4e360178c83c8e37810f56d50b9af64736f6c63430008030033"

// DeployInvestors deploys a new Ethereum contract, binding an instance of Investors to it.
func DeployInvestors(auth *bind.TransactOpts, backend bind.ContractBackend, _startover *big.Int, _institutionflag bool, _institution common.Address) (common.Address, *types.Transaction, *Investors, error) {
	parsed, err := abi.JSON(strings.NewReader(InvestorsABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(InvestorsBin), backend, _startover, _institutionflag, _institution)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Investors{InvestorsCaller: InvestorsCaller{contract: contract}, InvestorsTransactor: InvestorsTransactor{contract: contract}, InvestorsFilterer: InvestorsFilterer{contract: contract}}, nil
}

// Investors is an auto generated Go binding around an Ethereum contract.
type Investors struct {
	InvestorsCaller     // Read-only binding to the contract
	InvestorsTransactor // Write-only binding to the contract
	InvestorsFilterer   // Log filterer for contract events
}

// InvestorsCaller is an auto generated read-only Go binding around an Ethereum contract.
type InvestorsCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InvestorsTransactor is an auto generated write-only Go binding around an Ethereum contract.
type InvestorsTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InvestorsFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type InvestorsFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// InvestorsSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type InvestorsSession struct {
	Contract     *Investors        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// InvestorsCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type InvestorsCallerSession struct {
	Contract *InvestorsCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// InvestorsTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type InvestorsTransactorSession struct {
	Contract     *InvestorsTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// InvestorsRaw is an auto generated low-level Go binding around an Ethereum contract.
type InvestorsRaw struct {
	Contract *Investors // Generic contract binding to access the raw methods on
}

// InvestorsCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type InvestorsCallerRaw struct {
	Contract *InvestorsCaller // Generic read-only contract binding to access the raw methods on
}

// InvestorsTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type InvestorsTransactorRaw struct {
	Contract *InvestorsTransactor // Generic write-only contract binding to access the raw methods on
}

// NewInvestors creates a new instance of Investors, bound to a specific deployed contract.
func NewInvestors(address common.Address, backend bind.ContractBackend) (*Investors, error) {
	contract, err := bindInvestors(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Investors{InvestorsCaller: InvestorsCaller{contract: contract}, InvestorsTransactor: InvestorsTransactor{contract: contract}, InvestorsFilterer: InvestorsFilterer{contract: contract}}, nil
}

// NewInvestorsCaller creates a new read-only instance of Investors, bound to a specific deployed contract.
func NewInvestorsCaller(address common.Address, caller bind.ContractCaller) (*InvestorsCaller, error) {
	contract, err := bindInvestors(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &InvestorsCaller{contract: contract}, nil
}

// NewInvestorsTransactor creates a new write-only instance of Investors, bound to a specific deployed contract.
func NewInvestorsTransactor(address common.Address, transactor bind.ContractTransactor) (*InvestorsTransactor, error) {
	contract, err := bindInvestors(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &InvestorsTransactor{contract: contract}, nil
}

// NewInvestorsFilterer creates a new log filterer instance of Investors, bound to a specific deployed contract.
func NewInvestorsFilterer(address common.Address, filterer bind.ContractFilterer) (*InvestorsFilterer, error) {
	contract, err := bindInvestors(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &InvestorsFilterer{contract: contract}, nil
}

// bindInvestors binds a generic wrapper to an already deployed contract.
func bindInvestors(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(InvestorsABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Investors *InvestorsRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Investors.Contract.InvestorsCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Investors *InvestorsRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Investors.Contract.InvestorsTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Investors *InvestorsRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Investors.Contract.InvestorsTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Investors *InvestorsCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Investors.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Investors *InvestorsTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Investors.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Investors *InvestorsTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Investors.Contract.contract.Transact(opts, method, params...)
}

// FirstBlock is a free data retrieval call binding the contract method 0x231b0268.
//
// Solidity: function firstBlock() view returns(uint256)
func (_Investors *InvestorsCaller) FirstBlock(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Investors.contract.Call(opts, &out, "firstBlock")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FirstBlock is a free data retrieval call binding the contract method 0x231b0268.
//
// Solidity: function firstBlock() view returns(uint256)
func (_Investors *InvestorsSession) FirstBlock() (*big.Int, error) {
	return _Investors.Contract.FirstBlock(&_Investors.CallOpts)
}

// FirstBlock is a free data retrieval call binding the contract method 0x231b0268.
//
// Solidity: function firstBlock() view returns(uint256)
func (_Investors *InvestorsCallerSession) FirstBlock() (*big.Int, error) {
	return _Investors.Contract.FirstBlock(&_Investors.CallOpts)
}

// HsfToken is a free data retrieval call binding the contract method 0xf1ce62b7.
//
// Solidity: function hsfToken() view returns(address)
func (_Investors *InvestorsCaller) HsfToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Investors.contract.Call(opts, &out, "hsfToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// HsfToken is a free data retrieval call binding the contract method 0xf1ce62b7.
//
// Solidity: function hsfToken() view returns(address)
func (_Investors *InvestorsSession) HsfToken() (common.Address, error) {
	return _Investors.Contract.HsfToken(&_Investors.CallOpts)
}

// HsfToken is a free data retrieval call binding the contract method 0xf1ce62b7.
//
// Solidity: function hsfToken() view returns(address)
func (_Investors *InvestorsCallerSession) HsfToken() (common.Address, error) {
	return _Investors.Contract.HsfToken(&_Investors.CallOpts)
}

// Institution is a free data retrieval call binding the contract method 0xd1384eb6.
//
// Solidity: function institution() view returns(address)
func (_Investors *InvestorsCaller) Institution(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Investors.contract.Call(opts, &out, "institution")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Institution is a free data retrieval call binding the contract method 0xd1384eb6.
//
// Solidity: function institution() view returns(address)
func (_Investors *InvestorsSession) Institution() (common.Address, error) {
	return _Investors.Contract.Institution(&_Investors.CallOpts)
}

// Institution is a free data retrieval call binding the contract method 0xd1384eb6.
//
// Solidity: function institution() view returns(address)
func (_Investors *InvestorsCallerSession) Institution() (common.Address, error) {
	return _Investors.Contract.Institution(&_Investors.CallOpts)
}

// Institutionflag is a free data retrieval call binding the contract method 0x7929ce1e.
//
// Solidity: function institutionflag() view returns(bool)
func (_Investors *InvestorsCaller) Institutionflag(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Investors.contract.Call(opts, &out, "institutionflag")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Institutionflag is a free data retrieval call binding the contract method 0x7929ce1e.
//
// Solidity: function institutionflag() view returns(bool)
func (_Investors *InvestorsSession) Institutionflag() (bool, error) {
	return _Investors.Contract.Institutionflag(&_Investors.CallOpts)
}

// Institutionflag is a free data retrieval call binding the contract method 0x7929ce1e.
//
// Solidity: function institutionflag() view returns(bool)
func (_Investors *InvestorsCallerSession) Institutionflag() (bool, error) {
	return _Investors.Contract.Institutionflag(&_Investors.CallOpts)
}

// Maneger is a free data retrieval call binding the contract method 0xd5091834.
//
// Solidity: function maneger() view returns(address)
func (_Investors *InvestorsCaller) Maneger(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Investors.contract.Call(opts, &out, "maneger")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Maneger is a free data retrieval call binding the contract method 0xd5091834.
//
// Solidity: function maneger() view returns(address)
func (_Investors *InvestorsSession) Maneger() (common.Address, error) {
	return _Investors.Contract.Maneger(&_Investors.CallOpts)
}

// Maneger is a free data retrieval call binding the contract method 0xd5091834.
//
// Solidity: function maneger() view returns(address)
func (_Investors *InvestorsCallerSession) Maneger() (common.Address, error) {
	return _Investors.Contract.Maneger(&_Investors.CallOpts)
}

// Startover is a free data retrieval call binding the contract method 0x38fe6a96.
//
// Solidity: function startover() view returns(uint256)
func (_Investors *InvestorsCaller) Startover(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Investors.contract.Call(opts, &out, "startover")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Startover is a free data retrieval call binding the contract method 0x38fe6a96.
//
// Solidity: function startover() view returns(uint256)
func (_Investors *InvestorsSession) Startover() (*big.Int, error) {
	return _Investors.Contract.Startover(&_Investors.CallOpts)
}

// Startover is a free data retrieval call binding the contract method 0x38fe6a96.
//
// Solidity: function startover() view returns(uint256)
func (_Investors *InvestorsCallerSession) Startover() (*big.Int, error) {
	return _Investors.Contract.Startover(&_Investors.CallOpts)
}

// UsToken is a free data retrieval call binding the contract method 0x23191418.
//
// Solidity: function usToken() view returns(address)
func (_Investors *InvestorsCaller) UsToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Investors.contract.Call(opts, &out, "usToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// UsToken is a free data retrieval call binding the contract method 0x23191418.
//
// Solidity: function usToken() view returns(address)
func (_Investors *InvestorsSession) UsToken() (common.Address, error) {
	return _Investors.Contract.UsToken(&_Investors.CallOpts)
}

// UsToken is a free data retrieval call binding the contract method 0x23191418.
//
// Solidity: function usToken() view returns(address)
func (_Investors *InvestorsCallerSession) UsToken() (common.Address, error) {
	return _Investors.Contract.UsToken(&_Investors.CallOpts)
}

// InitToken is a paid mutator transaction binding the contract method 0xba2b6bad.
//
// Solidity: function initToken(address hsfaddress, address tcaddress) returns()
func (_Investors *InvestorsTransactor) InitToken(opts *bind.TransactOpts, hsfaddress common.Address, tcaddress common.Address) (*types.Transaction, error) {
	return _Investors.contract.Transact(opts, "initToken", hsfaddress, tcaddress)
}

// InitToken is a paid mutator transaction binding the contract method 0xba2b6bad.
//
// Solidity: function initToken(address hsfaddress, address tcaddress) returns()
func (_Investors *InvestorsSession) InitToken(hsfaddress common.Address, tcaddress common.Address) (*types.Transaction, error) {
	return _Investors.Contract.InitToken(&_Investors.TransactOpts, hsfaddress, tcaddress)
}

// InitToken is a paid mutator transaction binding the contract method 0xba2b6bad.
//
// Solidity: function initToken(address hsfaddress, address tcaddress) returns()
func (_Investors *InvestorsTransactorSession) InitToken(hsfaddress common.Address, tcaddress common.Address) (*types.Transaction, error) {
	return _Investors.Contract.InitToken(&_Investors.TransactOpts, hsfaddress, tcaddress)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xf231a4f6.
//
// Solidity: function placeBet(address fromAdress, uint256 _betClass, uint256 betAmount) payable returns(bool success)
func (_Investors *InvestorsTransactor) PlaceBet(opts *bind.TransactOpts, fromAdress common.Address, _betClass *big.Int, betAmount *big.Int) (*types.Transaction, error) {
	return _Investors.contract.Transact(opts, "placeBet", fromAdress, _betClass, betAmount)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xf231a4f6.
//
// Solidity: function placeBet(address fromAdress, uint256 _betClass, uint256 betAmount) payable returns(bool success)
func (_Investors *InvestorsSession) PlaceBet(fromAdress common.Address, _betClass *big.Int, betAmount *big.Int) (*types.Transaction, error) {
	return _Investors.Contract.PlaceBet(&_Investors.TransactOpts, fromAdress, _betClass, betAmount)
}

// PlaceBet is a paid mutator transaction binding the contract method 0xf231a4f6.
//
// Solidity: function placeBet(address fromAdress, uint256 _betClass, uint256 betAmount) payable returns(bool success)
func (_Investors *InvestorsTransactorSession) PlaceBet(fromAdress common.Address, _betClass *big.Int, betAmount *big.Int) (*types.Transaction, error) {
	return _Investors.Contract.PlaceBet(&_Investors.TransactOpts, fromAdress, _betClass, betAmount)
}

// RemoveBet is a paid mutator transaction binding the contract method 0x8a9faad2.
//
// Solidity: function removeBet(address toAddress, uint256 _betClass, uint256 removeAmount) payable returns(bool success)
func (_Investors *InvestorsTransactor) RemoveBet(opts *bind.TransactOpts, toAddress common.Address, _betClass *big.Int, removeAmount *big.Int) (*types.Transaction, error) {
	return _Investors.contract.Transact(opts, "removeBet", toAddress, _betClass, removeAmount)
}

// RemoveBet is a paid mutator transaction binding the contract method 0x8a9faad2.
//
// Solidity: function removeBet(address toAddress, uint256 _betClass, uint256 removeAmount) payable returns(bool success)
func (_Investors *InvestorsSession) RemoveBet(toAddress common.Address, _betClass *big.Int, removeAmount *big.Int) (*types.Transaction, error) {
	return _Investors.Contract.RemoveBet(&_Investors.TransactOpts, toAddress, _betClass, removeAmount)
}

// RemoveBet is a paid mutator transaction binding the contract method 0x8a9faad2.
//
// Solidity: function removeBet(address toAddress, uint256 _betClass, uint256 removeAmount) payable returns(bool success)
func (_Investors *InvestorsTransactorSession) RemoveBet(toAddress common.Address, _betClass *big.Int, removeAmount *big.Int) (*types.Transaction, error) {
	return _Investors.Contract.RemoveBet(&_Investors.TransactOpts, toAddress, _betClass, removeAmount)
}

// ShareOut is a paid mutator transaction binding the contract method 0x35400d66.
//
// Solidity: function shareOut(uint256 bounces) payable returns()
func (_Investors *InvestorsTransactor) ShareOut(opts *bind.TransactOpts, bounces *big.Int) (*types.Transaction, error) {
	return _Investors.contract.Transact(opts, "shareOut", bounces)
}

// ShareOut is a paid mutator transaction binding the contract method 0x35400d66.
//
// Solidity: function shareOut(uint256 bounces) payable returns()
func (_Investors *InvestorsSession) ShareOut(bounces *big.Int) (*types.Transaction, error) {
	return _Investors.Contract.ShareOut(&_Investors.TransactOpts, bounces)
}

// ShareOut is a paid mutator transaction binding the contract method 0x35400d66.
//
// Solidity: function shareOut(uint256 bounces) payable returns()
func (_Investors *InvestorsTransactorSession) ShareOut(bounces *big.Int) (*types.Transaction, error) {
	return _Investors.Contract.ShareOut(&_Investors.TransactOpts, bounces)
}
